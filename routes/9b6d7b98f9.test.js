// Test generated by RoostGPT for test nodetest-nov using AI Type Azure Open AI and AI Model roost-gpt4-32k

const request = require('supertest');
const express = require('express');
const app = express();
app.use(express.json());
app.use('/', require('./admin'));

describe('Admin Login route', () => {
  let user;

  beforeAll(async () => {
    user = await User.create({
      name: 'Test User',
      email: 'testuser@test.com',
      password: CryptoJS.SHA256('testpassword').toString()
    });
  });

  afterAll(async () => {
    await User.findOneAndDelete({email: 'testuser@test.com'});
  });

  test('Valid email and password', async () => {
    const res = await request(app).post('/login').send({
      email: 'testuser@test.com',
      password: 'testpassword'
    });
    expect(res.header['set-cookie']).toBeDefined();
    expect(res.status).toBe(302);
    expect(res.header.location).toBe('/admin/');
  });

  test('Invalid email', async () => {
    const res = await request(app).post('/login').send({
      email: 'wrongemail@test.com',
      password: 'testpassword'
    });
    expect(res.body.title).toBe('Admin Login');
    expect(res.body.error).toBe('Invalid email or password');
  });

  test('Invalid password', async () => {
    const res = await request(app).post('/login').send({
      email: 'testuser@test.com',
      password: 'wrongpassword'
    });
    expect(res.body.title).toBe('Admin Login');
    expect(res.body.error).toBe('Invalid email or password');
  });

  test('Server error', async () => {
    const res = await request(app).post('/login').send({
      email: 500,
      password: 'testpassword'
    });
    expect(res.status).toBe(500);
  });
});
