// Test generated by RoostGPT for test nodetest-nov using AI Type Azure Open AI and AI Model roost-gpt4-32k

const request = require('supertest');
const express = require('express');
const mongoose = require('mongoose');
const Post = require("../models/Post");
const app = express();
app.use(express.json());
app.use("/", router);

jest.mock('../models/Post');

describe('/POST/:slug', () => {
  test('should return 404 when post not found', async () => {
    Post.findOne.mockResolvedValue(null);

    const res = await request(app).get('/post/test-slug');

    expect(res.statusCode).toEqual(404);
    expect(res.text).toEqual('Post not found');
  });

  test('should return post when post found', async () => {
    const mockPost = {title: 'Test Title', slug: 'test-slug'};
    Post.findOne.mockResolvedValue(mockPost);

    const res = await request(app).get('/post/test-slug');

    expect(res.statusCode).toEqual(200);
    expect(res.body).toEqual({
      post: mockPost,
      title: mockPost.title
    });
  });

  test('should handle error when exception thrown', async () => {
    Post.findOne.mockRejectedValue(new Error('Test Error'));

    const res = await request(app).get('/post/test-slug');

    expect(res.statusCode).toEqual(500);
  });
});
