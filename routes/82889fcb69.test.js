// Test generated by RoostGPT for test nodetest-nov using AI Type Azure Open AI and AI Model roost-gpt4-32k

jest.mock("../models/Post");

const express = require("express");
const req = express();
const res = req.response;
const next = jest.fn();
const Post = require("../models/Post");
const router = require('express').Router();

describe("GET / - Home Page", () => {
  // Reset any runtime data changes
  afterEach(() => {
    jest.clearAllMocks();
  });

  // Test case: successfully retrieves posts
  test("should retrieve the posts correctly", async () => {
    Post.countDocuments.mockResolvedValue(20);
    Post.find.mockResolvedValue(Array(10).fill({}));

    await router.get("/", async (req, res, next) => {
      const page = req.query.page || 1;
      const limit = 10;
      const skip = (page - 1) * limit;
      const totalPosts = await Post.countDocuments();
      const totalPages = Math.ceil(totalPosts / limit);
      const posts = await Post.find().sort({
        createdAt: -1
      }).skip(skip).limit(limit).exec();
      res.render("index", {
        title: "Home - Devblog",
        posts,
        totalPages,
        currentPage: parseInt(page)
      });
    })(req, res, next);
    expect(res.render).toHaveBeenCalledWith("index", expect.objectContaining({
      title: "Home - Devblog",
      totalPages: 2,
      currentPage: 1
    }));
    expect(Post.countDocuments).toHaveBeenCalledTimes(1);
    expect(Post.find).toHaveBeenCalledTimes(1);
  });

  // Test case: error occurred when getting posts
  test("should pass the error to next function when error occurred", async () => {
    const mockError = new Error("database error");
    Post.countDocuments.mockRejectedValue(mockError);

    await router.get("/", async (req, res, next) => {
      const page = req.query.page || 1;
      const limit = 10;
      const skip = (page - 1) * limit;
      const totalPosts = await Post.countDocuments();
      const totalPages = Math.ceil(totalPosts / limit);
      const posts = await Post.find().sort({
        createdAt: -1
      }).skip(skip).limit(limit).exec();
      res.render("index", {
        title: "Home - Devblog",
        posts,
        totalPages,
        currentPage: parseInt(page)
      });
    })(req, res, next);
    expect(next).toHaveBeenCalledWith(mockError);
    expect(res.render).not.toHaveBeenCalled();
  });
});
