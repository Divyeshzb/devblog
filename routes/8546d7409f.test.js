// Test generated by RoostGPT for test nodetest-nov using AI Type Azure Open AI and AI Model roost-gpt4-32k

const request = require('supertest');
const express = require('express');
const multer = require('multer');
const CryptoJS = require("crypto-js");
const router = express.Router();
const Post = require("../models/Post");
const User = require("../models/User");
const storage = require("../utils/multerConfig");
const authenticate = require("../middlewares/auth");

jest.mock('../models/Post'); // Mock Post model

describe('POST /admin/add', () => {
  let app;
  beforeEach(() => {
    app = express();
    app.use(express.json());
    app.use('/admin', router);
  });

  it('should create a new post', async () => {
    const mockPost = new Post({ 
      title: 'test title', 
      subtitle: 'test subtitle',
      content: 'test content', 
      author: 'test author',
      slug: 'test-title',
      image: '/images/test.jpg' 
    });

    Post.mockResolvedValue(mockPost);

    const res = await request(app)
      .post('/admin/add')
      .send({
        title: 'test title',
        subtitle: 'test subtitle',
        content: 'test content',
        author: 'test author',
        image: '/images/test.jpg'
      });

    expect(res.statusCode).toEqual(302);
    expect(res.header.location).toEqual('/admin/');
  });

  it('should fail to create a new post', async () => {
    const errorMessage = 'Error while saving post';
    Post.mockImplementation(() => {
      throw new Error(errorMessage);
    });

    const res = await request(app)
      .post('/admin/add')
      .send({
        title: 'test title',
        subtitle: 'test subtitle',
        content: 'test content',
        author: 'test author',
        image: '/images/test.jpg'
      });

    expect(res.statusCode).toEqual(500);
    expect(res.text).toContain(errorMessage);

  });
});
