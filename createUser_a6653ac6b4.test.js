// Test generated by RoostGPT for test nodetest-nov using AI Type Azure Open AI and AI Model roost-gpt4-32k

// importing required dependencies and method
const User = require('./user');
const { createUser } = require('./create-user-cli');
const { hashPassword } = require('./hash-password');
let hashedPassword;

// jest mock functions
jest.mock('./hash-password');
jest.mock('./user');

// test suite
describe('createUser method', () => {
  // setup
  beforeEach(() => {
    hashedPassword = 'hashedPassword';
    hashPassword.mockReturnValue(hashedPassword);
    User.mockClear();
  });

  // test case: User created successfully
  test('should create a new user successfully', async () => {
    const userMockInstance = new User();
    userMockInstance.save.mockResolvedValue();
    const name = 'name';
    const email = 'email@test.com';
    const password = 'password';
    // calling the function
    await createUser(name, email, password);
    // assertions
    expect(hashPassword).toHaveBeenCalledWith(password);
    expect(User).toHaveBeenCalledWith({ name, email, password: hashedPassword });
    expect(userMockInstance.save).toHaveBeenCalled();
  });

  // test case: User creation failed due to an error
  test('should fail to create a new user when save throws an error', async () => {
    const error = new Error('Failed to create user');
    const userMockInstance = new User();
    userMockInstance.save.mockRejectedValue(error);
    const name = 'name';
    const email = 'email@test.com';
    const password = 'password';
    // calling the function
    try {
      await createUser(name, email, password);
    } catch (e) {
      // assertions
      expect(hashPassword).toHaveBeenCalledWith(password);
      expect(User).toHaveBeenCalledWith({ name, email, password: hashedPassword });
      expect(userMockInstance.save).toHaveBeenCalled();
      expect(e).toBe(error);
    }
  });
});
